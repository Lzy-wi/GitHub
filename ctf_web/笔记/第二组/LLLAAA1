# 一、1_RE.html
### 1.汇编语言不属于高级语言。
### 2.汇编语言
> 被编译为机器语言（机器语言（machine language）是一种指令集的体系。这种指令集，称机器码（machine code），是电脑的CPU可直接解读的数据。）后可由处理器执行。
### 3.典型处理器的主要任务：
>  ①从内存中读取机器语言指令、译码、执行。
 ②根据指令代码管理自己的寄存器。
 ③根据指令或自己的需要修改内存的内容。
     ④响应其他硬件的中断请求。
### 4.寄存器
> 寄存器位于CPU中，可以保存特定长度的数据，这些数据可以被用户在不同寄存器之间移动。
### 5.通用寄存器
> 都是32bit的，包括：EAX（较常用在运算方面）、EBX（相对于EAX、ECX、EDX通常作为内存偏移指针使用）、ECX（通常用于特定指令的计数）、EDX（在某些运算中作为EAX的溢出寄存器）、ESI（通常在内存操作指令中作为源地址指针使用，一般不用于通用寄存器）、EDI（通常在内存操作指令中作为目的地址指针使用）、EBP（被高级语言编译器用以建造堆栈帧来保存函数或过程的局部变量）
### 6.段寄存器和选择器
> 段寄存器或选择器，在没有指定的情况下都是使用默认的那个。
段寄存器-16bit（实模式）选择器-32bit（保护模式）
CS代码段（代码选择器）：指向当前正在执行的地址，除了跳转或其他分支指令外，无法修改该寄存器的内容。
DS数据段（数据选择器）：这个寄存器的低16-bit连同ESI一同指向指令将要执行的内存。这个寄存器可被装入任意数值，做法是先把数据给AX，在把它从AX传送给DS。
ES附加段（附加选择器）：这个寄存器的低16-bit连同EDI一同指向指令将要处理的内存。
FS（F段或F选择器）：可以用这个寄存器作为默认段寄存器或选择器的一个替代品。
GS（G段或G选择器）：和FS几乎完全一样。
SS（堆栈段或堆栈选择器）：这个寄存器的低16-bit连同ESP一同指向下一次堆栈操作（push和pop）所要使用的堆栈地址。这个寄存器也可以被装入任意数值，可通过入栈和出站操作来赋值。
### 7.特殊寄存器
> EIP，32-bit，这个寄存器非常重要，同CS一同指向即将执行的那条指令的地址。不能够直接修改这个寄存器的值，修改它的唯一方法是跳转或分支指令。（CS是默认的段或选择器）
ESP，32-bit，这个寄存器指向堆栈中即将被操作的那个地址。尽管可以修改它的值，但并不提倡这样做，可能会破坏堆栈。（SS是默认的段或选择器）
IP： Instruction Pointer，指令指针。
SP： Stack Pointer，堆栈指针。
### 8. 其他寄存器
> CR0、CR2、CR3（控制寄存器）。例如CR0的作用是切换实模式和保护模式。
D0、D1、D2、D3、D6和D7（调试寄存器），他们可以作为调试器的硬件支持来设置条件断点。
TR3、TR4、TR5、TR6、TR？寄存器（测试寄存器）用于某些条件测试。
# 二、1_web.html
了解了GitHub是一个只支持git作为唯一的版本库格式进行托管，为用户提供私有软件项目托管的平台。进行了签到任务，感觉如果想要使用GitHub，英语是很重要的。知道markdown编辑器是GitHub的主流编辑器。然后我查找了关于markdown的简单版语法说明，学习到：
一个段落是由一个以上的连接的行句组成，而一个以上的空行则会划分出不同的段落（空行的定义是显示上看起来像是空行，就被视为空行，例如有一行只有空白和 tab，那该行也会被视为空行），一般的段落不需要用空白或换行缩进。
Markdown 支持两种标题的语法，Setext 和 atx 形式。Setext 形式是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题），Atx 形式在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶。区块引用则使用 email 形式的 '>' 角括号。
Markdown 使用星号和底线来标记需要强调的区段。星号输出HTML为<em> 标签告诉浏览器把其中的文本表示为强调的内容。对于所有浏览器来说,这意味着要把这段文字用斜体来显示。底线输出HTML为<strong>。
有序的列表则是使用一般的数字接着一个英文句点作为项目标记。例如：
1.	Red    
2. Green
3. Blue输出为：
<ol>
<li>Red</li>
<li>Green</li>
<li>Blue</li>
</ol>
……http://wowubuntu.com/markdown/basic.html 具体的我是在这个网站上找到的。
# 三、密码学预热.html
### 1.二进制，八进制，十进制，十六进制的概念以及相互转换：
#### 概念：
 二进制：二进制，Binary，是计算技术中广泛采用的一种数制。二进制数据是用0和1两个数码来表示的数。它的基数为2，进位规则是“逢二进一”，借位规则是“借一当二”。计算机中的二进制则是一个非常微小的开关，用“开”来表1，“关”来表示0。
 
八进制：八进制，Octal，缩写OCT或O，一种以8为基数的计数法，采用0，1，2，3，4，5，6，7八个数字，逢八进1。一些编程语言中常常以数字0开始表明该数字是八进制。

十进制：十进制，Decimal，就是日常生活中用的最多的，如：1，2，3，……100，200，300……。十进制基于位进制和十进位两条原则，即所有的数字都用10个基本的符号表示，满十进一，同时同一个符号在不同位置上所表示的数值不同，符号的位置非常重要。基本符号是0到9十个数字。

十六进制：十六进制（英文名称：Hexadecimal），是计算机中数据的一种表示方法。同我们日常生活中的表示法不一样。它由0-9，A-F组成，字母不区分大小写。与10进制的对应关系是：0-9对应0-9；A-F对应10-15；N进制的数可以用0~(N-1)的数表示，超过9的用字母A-F。
#### 转换：
十进制转二进制
方法为：十进制数除2取余法，即十进制数除2，余数为权位上的数，得到的商值继续除2，依此步骤继续向下运算直到商为0为止。

二进制转十进制
方法为：把二进制数按权展开、相加即得十进制数。

二进制转八进制
方法为：3位二进制数按权展开相加得到1位八进制数。（注意事项，3位二进制转成八进制是从右到左开始转换，不足时补0）。

八进制转成二进制
方法为：八进制数通过除2取余法，得到二进制数，对每个八进制为3个二进制，不足时在最左边补零。

二进制转十六进制
方法为：与二进制转八进制方法近似，八进制是取三合一，十六进制是取四合一。（注意事项，4位二进制转成十六进制是从右到左开始转换，不足时补0）。

十六进制转二进制
方法为：十六进制数通过除2取余法，得到二进制数，对每个十六进制为4个二进制，不足时在最左边补零。
###  2.与、或、非、异或的逻辑运算：
AND是"与" 1+0=1 1+1=1 0+0=0 0+1=1
NOR是"或" 1+0=1 0+0=0 1+1=1 0+1=1
XOR是"异或" 1+1=1 0+0=1 1+0=0 0+1=0
###  3.明码、反码、补码的概念：
原码就是符号位加上真值的绝对值, 即用第一位表示符号, 其余位表示值.

反码的表示方法是：正数的反码是其本身。负数的反码是在其原码的基础上, 符号位不变，其余各个位取反。

补码的表示方法是:正数的补码就是其本身。负数的补码是在其原码的基础上, 符号位不变, 其余各位取反, 最后+1. (即在反码的基础上+1)。
### 4.明文，密文，秘钥，公钥，私钥，密钥空间的概念：
明文，是指没有加密的文字（或者字符串）。在通信系统中它可能是比特流，如文本、位图、数字化的语音或者数字化的视频图像等。一般可以简单地认为明文是有意义的字符或比特集，或通过某种公开的编码标准就能获得的消息。也是指接受方通过共同的密码破译（指在不知道密钥的情况下，恢复出密文中隐藏的明文信息的过程）方法将其破译解读为直接的文字或可直接理解的信息。

密文：是指明文通过密钥加密所成的文字。

密钥：是在明文转换为密文或将密文转换为明文的算法中输入的参数。它分为对称密钥和非对称密钥两种。

对称密钥信息的发送方和接收方使用同一个密钥去加密和解密数据。它的最大优势是加/解密速度快，适合于对大数据量进行加密。

非对称密钥需要使用不同的密钥来分别完成加密和解密操作，一个公开发布（公钥），另一个由用户自己秘密保存（私钥）。信息发送者用公开密钥去加密，而信息接收者则用私用密钥去解密。（包含公钥、私钥的概念）
### 5.凯撒密码，简单替换密码，换位密码，分组密码，对称密码与公钥密码，单向散列函数，消息认证码，数字签名，数字证书，伪随机数生成器的概念。
#### 凯撒密码：
凯撒密码的基本思想是：通过把字母移动一定的位数来实现加密和解密。它是一种替换加密的方式，通常被作为其他更复杂的加密方法中的一个步骤。

#### 简单替换密码：
明文的一个字符用相应的一个密文字符代替，而且密文所用的字符与一般的明文所用字符属同一语言系统。（语言系统是如何定义的？汉语英语？拼音文字？……）

#### 换位密码：
在简单的纵行换位密码中，明文以固定的宽度水平地写在一张图表纸上，密文按垂直方向读出，解密就是密文按相同的宽度垂直的写在图表纸上，然后水平地读出明文。
例如：`please show me your comedy book。`
将这句话按照固定宽度水平地写在纸上：
`pleases
Howmeyo
Urcomed
Ybook`
则密文应该是：` phuy lorb ewco amoo semk eye sod`

#### 分组密码：
将明文消息编码表示后的数字（简称明文数字）序列，划分成长度为n的组（可看成长度为n的矢量），每组分别在密钥的控制下变换成等长的输出数字（简称密文数字）序列。

#### 对称密码：
对称密钥加密机制即对称密码体系，也称为单钥密码体系和传统密码体系。对称密码体系通常分为两大类，一类是分组密码（如DES、AES算法），另一类是序列密码（如RC4算法）。对称密码体系加密和解密时所用的密钥是相同的或者是类似的，即由加密密钥可以很容易地推导出解密密钥，反之亦然。

#### 公钥密码：
又称为非对称密码，拥有公钥密码的用户分别拥有加密密钥和解密密钥。通过加密密钥不能得到解密密钥，并且加密密钥是公开的。

#### 单向散列函数：
又被称为hash函数。就是把任意长的输入消息串转化为固定长的输出串，并且在已知输出串的情况下难以得到输入串的一种函数。
常见的Hash函数包括：
MD5（可以用来把不同长度的数据块进行暗码运算成一个128位的数值）、
SHA（可以对任意长度的数据运算生成一个160位的数值）、
MAC（消息认证代码 见下）、
CRC（循环冗余校验码。被广泛使用在各种数据校验应用中。占用系统资源少，用软硬件均能实现。它并不是严格意义上的散列函数，但是它的作用与散列算法大致相同，所以归于此类）

#### 消息认证代码（MAC）：
是一种使用密钥的单向函数，可以用它们在系统上或用户之间认证文件或消息。HMAC（用于消息认证的密钥散列法）就是这种函数的一个例子。

#### 数字签名：
是一种类似写在纸上的普通的物理签名，是只有信息的发送者才能产生的别人无法伪造的一段数字串，但是使用了公钥加密领域的技术实现，用于鉴别数字信息的方法。是非对称密钥加密技术与数字摘要技术的应用。它是只有信息的发送者才能产生的别人无法伪造的一段数字串，这段数字串同时也是对信息的发送者发送信息真实性的一个有效证明。

#### 数字证书： 
互联网通讯中标志通讯各方身份信息的一串数字，提供了一种在Internet上验证通信实体身份的方式，它是身份认证机构盖在数字身份证上的一个章或印（或者说加在数字身份证上的一个签名）。它是一个经证书授权中心数字签名的包含公开密钥拥有者信息以及公开密钥的文件。最简单的证书包含一个公开密钥、名称以及证书授权中心的数字签名。人们可以在网上用它来识别对方的身份。

#### 伪随机生成器：
由于通过程序得到的随机数无论什么算法都一定是通过递推公式得到的序列，所以我们需要调用srand设置种子从而得到不同序列。因为生成一个真正意义上的“随机数”对于计算机来说是不可能的，伪随机数也只是尽可能地接近其应具有的随机性，但是因为有“种子值”，所以伪随机数在一定程度上是可控可预测的。方法包括：取中法、同余法、移位法以及梅森旋转算法。
